from aiogram import Bot
from aiogram import Dispatcher
from aiogram import types
from aiogram import Router, F
from aiogram.filters import CommandStart, Command

from time import time

from werkzeug.utils import secure_filename

import asyncio
import logging

from manage_service_data import get_service_data_from_file, set_service_data_into_file

BOT_TOKEN = "6127190393:AAHTTLBdq1x9bt6NUFgJetvMdljQf_tCnOE"
ALLOWED_EXTENSIONS = set(['pdf'])

class Session:
    def __init__(self):
        self.m_chat_id:str = ""
        self.session_ID:str = ""

    def init_new_session(self, session_ID:str, chat_ID:str):
        app_status = get_service_data_from_file("app_status")
        if app_status is None:
            return -1
        
        if app_status == "busy":
            return -1
        
        if app_status == "free":
            if session_ID != get_service_data_from_file("session_id"): return -1
            set_service_data_into_file("chat_id", str(chat_ID))
            
            self.session_ID = session_ID
            self.m_chat_id = chat_ID
            # set_service_data_into_file("app_status", "busy")
            # set_service_data_into_file("bot_request", "newuser")
            return 1
        return -1
    
    def set_file_path(self, path:str, chat_ID:str):
        if chat_ID == self.m_chat_id:
            if get_service_data_from_file("app_status") == "busy":
                return 0
            set_service_data_into_file("file_path", path)
            set_service_data_into_file("bot_request", "path")
            return 1
        return -1


        

client_part = Session()


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

router = Router()


@router.message(F.document)
async def get_doc(message: types.Message):
    path = secure_filename(message.document.file_name)

    if allowed_file(message.document.file_name):
        await message.bot.download(message.document, destination= "documents/" + path)
        stat = client_part.set_file_path(path=path, chat_ID=str(message.chat.id))
        if stat == -1:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –∑–∞–Ω—è—Ç")
            return
        elif stat == 0:
            await message.answer("–í–∞—à —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ qr-–∫–æ–¥ –∑–∞–Ω–æ–≤–æ.")
            return    
        await message.answer("–í–∞—à —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω –∞–ø–ø–∞—Ä–∞—Ç–∞.")
    else:
        await message.answer("–í–∞—à —Ñ–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —É—Å–ª–æ–≤–∏—è(pdf)")



dp = Dispatcher()
dp.include_routers(router)


@dp.message(Command('start'))
async def handle_start(message: types.Message):
    if client_part.init_new_session(session_ID=message.text[7:], chat_ID=str(message.chat.id)) == -1:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏üôÇ") 
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –∑–∞–Ω—è—Ç")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏üôÇ") 
        await message.answer("–ê–¥—Ä–µ—Å: –≥.–¢–æ–º—Å–∫ —É–ª.–ö–∏—Ä–æ–≤–∞ –¥.56–∞")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å pdf")



async def bot_main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN)
    await dp.start_polling(bot)


def bot_start():
    asyncio.run(bot_main())
